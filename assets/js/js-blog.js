(()=>{"use strict";class t{constructor(){this.init(),this.blogLists=[],this.container=document.querySelector("[data-blog-container]"),this.closeBtn=document.querySelector("[data-blog-close-btn]"),this.overlay=document.querySelector("[data-blog-overlay]"),this.title=document.querySelector("[data-blog-title]"),this.desc=document.querySelector("[data-blog-desc]"),this.img=document.querySelector("[data-blog-img]"),this.details=document.querySelector("[data-blog-details]"),this.time=document.querySelector("[data-blog-time]"),this.filterBtn=document.querySelectorAll("[data-filter-btn]")}async init(){try{let t=[];if(t=await fetch("./mocks/blogs.json").then((t=>t.json())).catch((t=>[])),this.blogLists=t,this.renderBlogs(t),"#blog"===location.hash&&location.search){const e=t.find((t=>location.search.includes(this.convertSlug(t.title))));if(!e)return;setTimeout((()=>{const t=`?article=${this.convertSlug(e.title)}#blog`;history.pushState(null,null,t),this.displayArticleContent(e)}),500)}this.closeArticle(),this.filterBlogs()}catch(t){console.error("Error fetching blogs:",t)}}renderBlogs(t){const e=document.querySelector(".blog-posts-list");if(e.innerHTML=[],t.length){t.forEach((t=>{const i=`\n          <li class="blog-post-item">\n            <figure class="blog-banner-box">\n              <img src="${t.imageUrl}" alt="${t.title}" loading="lazy" />\n            </figure>\n            <div class="blog-content">\n              <div class="blog-meta">\n                <p class="blog-category">${t.tag.toUpperCase()}</p>\n                <span class="dot"></span>\n                <time datetime="${t.createAt}">${t.createAt}</time>\n              </div>\n              <h3 class="h3 blog-item-title">${t.title}</h3>\n              <p class="blog-text">${t.description}</p>\n            </div>\n          </li>\n        `;e.innerHTML+=i}));const i=document.querySelectorAll(".blog-post-item");i&&i.forEach(((t,e)=>{t.addEventListener("click",(()=>this.loadArticle(e)))}))}else e.innerHTML+='<h3 class="h3 blog-item-title">No Blog Here</h3>'}convertSlug(t){return t.toLowerCase().trim().replace(/[^\w\s-]/g,"").replace(/\s+/g,"-").replace(/--+/g,"-")}toggleArticle(){this.container.classList.toggle("active"),this.overlay.classList.toggle("active")}closeArticle(){this.closeBtn.addEventListener("click",(()=>{this.toggleArticle(),this.clearSearchParams()})),this.overlay.addEventListener("click",(()=>{this.toggleArticle(),this.clearSearchParams()}))}displayArticleContent(t){this.toggleArticle(),this.title.textContent=t.title,this.desc.textContent=t.description,this.details.textContent=t.content,this.img.src=t.imageUrl,this.img.alt=t.title,this.img.alt=t.title,this.time.textContent=t.createAt}loadArticle(t){const e=this.blogLists.find(((e,i)=>i===t))||{};if(!e)return null;const i=`?article=${this.convertSlug(e.title)}#blog`;history.pushState(null,null,i),this.displayArticleContent(e)}clearSearchParams(){const t=new URL(window.location);t.search="",history.replaceState(null,"",t)}filterBlogs(){let t=[],e=this.filterBtn[0];for(let i=0;i<this.filterBtn.length;i++)this.filterBtn[i].addEventListener("click",(()=>{let l=this.filterBtn[i].innerText.toLowerCase();e.classList.remove("active"),this.filterBtn[i].classList.add("active"),e=this.filterBtn[i],t="all"===l?this.blogLists:this.blogLists.filter((t=>t.tag===l)),this.renderBlogs(t)}))}}document.addEventListener("DOMContentLoaded",(()=>{new t}))})();